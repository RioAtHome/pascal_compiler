import production_rules

# No entry Means Error
PARSING_TABLE = {
    "header":{"program":1},
    "identifier_list":{"id": 1},
    "type_":{"integer":1, "real":1, "array": 2},
    "standard_type":{"integer":1, "real": 2},
    "subprogram_declarations":{"function": 1, "procedure": 1, "begin": 1},
    "subprogram_declaration":{"function": 1, "procedure": 1},
    "subprogram_head":{"function": 1, "procedure": 2},
    "args":{";":1, ":": 1, "(": 2},
    "parameter_list":{"id": 1},
    "compound_statement":{"begin":1},
    "optional_statements":{"id":1, "begin":1, "end":2, "if":1, "while":1},
    "statement_list":{"id":1, "begin":1, "if":1, "while":1, },
    "statement":{"id":4, "begin":1, "if":2, "while":3},
    "statement_":{";":2, "[":1, "(":2, "end":2, "else":2, ":=": 1},
    "match_statement":{"else":1},
    "variable":{"id":1},
    "variable_":{"[":1, ":=":2},
    "procedure_statement":{"id":1},
    "procedure_statement_":{";":2, "(":1, "end":2, "else":2},
    "expression_list":{"id":1, "num":1, "(":1, "not":1, "+":1, "-":1},
    "expression":{"id":1, "num":1, "(":1,"not":1, "+":1, "-":1},
    "expression_":{";":2, ")":2, "]":2, "end":2, "then":2, "do":2, "else":2, ",":2, "=":1, "<":1,"<=":1,">=":1,">":1,"<>":1,},
    "simple_expression":{"id":1, "num":1, "(":1, "not":1, "+":2, "-":2},
    "term":{"id":1, "num":1, "(":1, "not":1, },
    "factor_":{";":2, "]":2, "(":1, ")":2, "end":2,"then":2, "do":2, "else":2, "+":2, "-":2, ",":2, "*":2,"/":2,'div':2,"mod":2,"and":2, "=":2, "<":2,"<=":2,">=":2,">":2,"<>":2, "or":2},
    "factor":{"id":1, "num":2, "(":3, "not":4},
    "sign":{"+":1, "-":2},
    "identifier_list_":{":":2,",":1},
    "declarations":{"function":1, "procedure":1,"begin":1, "var":1},
    "declarations_":{"function":2, "procedure":2,"begin":2, "var":1},
    "subprogram_declarations_":{"function":1, "procedure":1,"begin":2},
    "parameter_list_":{";":1, ")":2},
    "statement_list_":{";":1, "end":2},
    "expression_list_":{")":2, ",":1},
    "simple_expression_":{";":2, ")":2, "end":2, ",":2, "]":2, "then":2, "do":2, "else":2, "+":1, "-":1, ",":2, "=":2, "<":2,"<=":2,">=":2,">":2,"<>":2, "or":1},
    "term_":{";":2, ")":2, "end":2, ",":2,"]":2, "then":2,"do":2, "else":2, "+":2, "-":2,",":2, "*":1, "/":1, "div":1, "mod":1, "and":1,"=":2, "<":2,"<=":2,">=":2,">":2,"<>":2, "or":2},
    "mulop":{"*":1,"/":2,'div':3,"mod":4,"and":5},
    "relop":{"=":1, ">":2,"<":3,"<=":4,">=":5,"<>":6},
    "addop":{"+":1, "-":2, "or":3},
    "assignop":{":=":1},

}

production_mapping = {
    "header":production_rules.header,
    "identifier_list":production_rules.identifier_list,
    "identifier_list_":production_rules.identifier_list_,
    "type_":production_rules.type_,
    "standard_type":production_rules.standard_type,
    "subprogram_declarations":production_rules.subprogram_declarations,
    "subprogram_declaration":production_rules.subprogram_declaration,
    "subprogram_head":production_rules.subprogram_head,
    "args":production_rules.args,
    "parameter_list":production_rules.parameter_list,
    "compound_statement":production_rules.compound_statement,
    "optional_statements":production_rules.optional_statements,
    "statement_list":production_rules.statement_list,
    "statement":production_rules.statement,
    "statement_":production_rules.statement_,
    "match_statement":production_rules.match_statement,
    "variable":production_rules.variable,
    "variable_":production_rules.variable_,
    "procedure_statement":production_rules.procedure_statement,
    "procedure_statement_":production_rules.procedure_statement_,
    "expression_list":production_rules.expression_list,
    "expression":production_rules.expression,
    "expression_":production_rules.expression_,
    "simple_expression":production_rules.simple_expression,
    "term":production_rules.term,
    "factor":production_rules.factor,
    "factor_":production_rules.factor_,
    "sign":production_rules.sign,
    "declarations":production_rules.declarations,
    "declarations_":production_rules.declarations_,
    "subprogram_declarations_":production_rules.subprogram_declarations_,
    "parameter_list_":production_rules.parameter_list_,
    "statement_list_":production_rules.statement_list_,
    "expression_list_":production_rules.expression_list_,
    "simple_expression_":production_rules.simple_expression_,
    "term_":production_rules.term_,
    "relop":production_rules.relop,
    "addop":production_rules.addop,
    "mulop":production_rules.mulop,
    "assignop":production_rules.assignop,
}