header ::= program id ; declarations subprogram_declarations compound_statement .
identifier_list ::= id identifier_list_
type ::= standard_type
type ::= array [ num .. num ] of standard_type
standard_type ::= integer
standard_type ::= real
subprogram_declarations ::= subprogram_declarations_
subprogram_declaration ::= subprogram_head declarations compound_statement
subprogram_head ::= function id args : standard_type ;
subprogram_head ::= procedure id args ;
args ::= l# parameter_list r#
args ::= ''
parameter_list ::= id identifier_list_ : type parameter_list_
compound_statement ::= begin optional_statements end
optional_statements ::= statement_list
optional_statements ::= ''
statement_list ::= statement statement_list_
statement ::= variable assignop expression
statement ::= procedure_statement
statement ::= begin optional_statements end
statement ::= if expression then statement match_statement
statement ::= while expression do statement
match_statement ::= else statement
match_statement ::= ''
variable ::= id variable_
variable_ ::= [ expression ]
variable_ ::= ''
procedure_statement ::= id procedure_statement_
procedure_statement_ ::= l# expression_list r#
procedure_statement_ ::= ''
expression_list ::= expression expression_list_
expression ::= simple_expression expression_
expression_ ::= relop simple_expression
expression_ ::= ''
simple_expression ::= term simple_expression_
simple_expression ::= sign term simple_expression_
term ::= factor term_
factor_ ::= l# expression_list r#
factor_ ::= ''
factor ::= id factor_
factor ::= num
factor ::= l# expression r#
factor ::= not factor
sign ::= +
sign ::= -
identifier_list_ ::= , id identifier_list_
identifier_list_ ::= ''
declarations ::= declarations_
declarations_ ::= var identifier_list : type ; | ''
subprogram_declarations_ ::= subprogram_declaration ; subprogram_declarations_
subprogram_declarations_ ::= ''
parameter_list_ ::= ; identifier_list : type parameter_list_
parameter_list_ ::= ''
statement_list_ ::= ; statement statement_list_
statement_list_ ::= ''
expression_list_ ::= , expression expression_list_
expression_list_ ::= ''
simple_expression_ ::= addop term simple_expression_
simple_expression_ ::= ''
term_ ::= mulop factor term_
term_ ::= ''
mulop ::= *
mulop ::= /
mulop ::= div
mulop ::= mod
mulop ::= and
relop ::= =
relop ::= >
relop ::= <
relop ::= <=
relop ::= >=
relop ::= <>
addop ::= +
addop ::= -
addop ::= or
assignop ::= :=