             	header -> program id; declarations subprogram_declarations compound_statement .
     	identifier_list -> id identifier_list'
                	type -> standard_type
                      	| array [ num .. num ] of standard_type
       	standard_type -> integer
                      	| real
 subprogram_declarations -> subprogram_declarations'
  subprogram_declaration -> subprogram_head declarations compound_statement
     	subprogram_head -> function id arguments : standard_type ;
                      	| procedure id arguments ;
           	arguments -> ( par ameter_list ) |ϵ
      	parameter_list -> id identifier_list' : type parameter_list'
  	compound_statement -> begin optional_statements end
 	optional_statements -> statement_list |ϵ
      	statement_list -> statement statement_list'
           	statement -> variable assignop expression
                      	| procedure_statement
                      	| begin optional_statements end
                      	| if expression then statement match_statement
                      	| while expression do statement
     	Match_statement -> else statement
                      	| ϵ
            	variable -> id
                      	| id [ expression ]
 	procedure_statement -> id
                      	| id ( expression_list )
     	expression_list -> expression expression_list'
          	expression -> simple_expression
                      	| simple_expression relop simple_expression
   	simple_expression -> term simple_expression'
                      	| sign term simple_expression'
                	term -> factor term'
              	factor -> id
                      	| id ( expression_list )
                      	| num
                      	| ( expression )
                      	| not factor
                	sign -> + |−
    	identifier_list' -> , id identifier_list'
                      	| ϵ
       	declarations -> var identifier_list : type ; |ϵ declarations
                      	| ϵ
subprogram_declarations' -> subprogram_declaration ; subprogram_declarations'
                      	| ϵ
     	parameter_list' -> ; identifier_list : type parameter_list'
                      	| ϵ
     	statement_list' -> ; statement statement_list'
                      	| ϵ
    	expression_list' -> , expression expression_list'
                      	| ϵ
  	simple_expression' -> addop term simple_expression'
                      	| ϵ
               	term' -> mulop factor term'
                      	| ϵ
                relop -> <| <=| ==| !=| >| >=
                addop -> +| -
                mulop -> *| / | div | mod | and
                assignop -> :=

